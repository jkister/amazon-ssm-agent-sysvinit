#!/bin/bash
# 
# amazon-ssm-agent-sysvinit v2023.10.21.01
# Copyright Â© 2023 Jeremy Kister
# https://jeremy.kister.net./
#
# chkconfig: 2345 20 80
# description: AWS Systems Manager Agent (SSM Agent)

### BEGIN INIT INFO
# Provides:          amazon-ssm-agent
# Required-Start:    $network $named $remote_fs $syslog $time
# Required-Stop:     $network $named $remote_fs $syslog $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: AWS Systems Manager Agent (SSM Agent)
# Description:       https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html
### END INIT INFO

NAME=amazon-ssm-agent
DAEMON=/usr/bin/$NAME
PIDFILE=/var/run/$NAME.pid

function waitpid {
    pid=$1
    while kill -0 "$pid" 2>/dev/null ; do
        sleep 1
    done
}

function checkpid {
    pid=$1
    if ps -p $pid >/dev/null ; then
        return 1
    fi
    return 0
}

function is_running {
    if [ -s $PIDFILE ] ; then
        checkpid $(cat $PIDFILE)
        if [ $? -eq 0 ] ; then
            rm $PIDFILE
            return 0
        fi
        return 1
    else
        pid=$(pgrep -f $DAEMON)
        if [ "$pid" ] ; then
            echo "detected deamon without proper pid: hooking pidfile with $pid" >&2
            echo $pid > $PIDFILE
            return 1
        fi
    fi
    return 0
}

case "$1" in
    'start')
        is_running "$NAME"
        if [ $? -eq 1 ] ; then
            echo "$NAME already running with pid: $pid" >&2
            exit 1
        fi
            
        echo "starting $NAME"
        cd /tmp
        nohup nice -n -2 $DAEMON </dev/null >/var/log/$NAME.log 2>&1 &
        pid=$!
        echo $pid > $PIDFILE
        ;;
    'stop')
        is_running "$NAME"
        if [ $? -eq 0 ] ; then
            echo "$NAME is not running" >&2
            exit 1
        fi
        echo "stopping $NAME"
        pid=$(cat $PIDFILE)
        kill $pid
        waitpid $pid
        rm $PIDFILE
        ;;
    'restart')
        $0 stop
        waitpid $(cat $PIDFILE)
        $0 start
        ;;
    'status')
        is_running "$NAME"
        if [ $? -eq 0 ] ; then
            echo "$NAME is not running"
        elif [ $? -eq 1 ] ; then
            echo "$NAME is running"
        else
            echo "Error finding $NAME status" >&2
            exit 1
        fi
        ;;
    *)
        echo "Usage: $0 [start|stop|restart|status]"
        exit 1
        ;;
esac

